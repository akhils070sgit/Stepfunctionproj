"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerAll = exports.AslPathValidatorConfig = void 0;
var index_1 = require("./index");
var types_1 = require("./types");
exports.AslPathValidatorConfig = {
    format_names: (_a = {},
        _a[types_1.AslPathContext.PATH] = "asl_path",
        _a[types_1.AslPathContext.REFERENCE_PATH] = "asl_ref_path",
        _a[types_1.AslPathContext.PAYLOAD_TEMPLATE] = "asl_payload_template",
        _a),
    silent: true,
};
var registerAll = function (ajv, config) {
    if (config === void 0) { config = exports.AslPathValidatorConfig; }
    var validateAdapter = function (path, pathType) {
        var result = (0, index_1.validatePath)(path, pathType);
        if (!config.silent && !result.isValid) {
            ajv.logger.error("asl_path_validator: code:".concat(result.code, ". pathType:").concat(pathType, ". input: ").concat(path));
        }
        return result.isValid;
    };
    ajv.addFormat(config.format_names[types_1.AslPathContext.REFERENCE_PATH], function (path) {
        return validateAdapter(path, types_1.AslPathContext.REFERENCE_PATH);
    });
    ajv.addFormat(config.format_names[types_1.AslPathContext.PATH], function (path) {
        return validateAdapter(path, types_1.AslPathContext.PATH);
    });
    ajv.addFormat(config.format_names[types_1.AslPathContext.PAYLOAD_TEMPLATE], function (path) {
        return validateAdapter(path, types_1.AslPathContext.PAYLOAD_TEMPLATE);
    });
};
exports.registerAll = registerAll;
