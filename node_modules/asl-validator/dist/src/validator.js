"use strict";
var json_schema_errors_1 = require("./checks/json-schema-errors");
var missing_transition_target_errors_1 = require("./checks/missing-transition-target-errors");
var state_transitions_errors_1 = require("./checks/state-transitions-errors");
var duplicate_state_names_errors_1 = require("./checks/duplicate-state-names-errors");
var missing_terminal_state_errors_1 = require("./checks/missing-terminal-state-errors");
var duplicate_payload_template_fields_1 = require("./checks/duplicate-payload-template-fields");
var DefaultOptions = {
    checkPaths: true,
    checkArn: true,
};
module.exports = function validator(definition, opts) {
    var options = opts !== null && opts !== void 0 ? opts : DefaultOptions;
    var errors = (0, json_schema_errors_1.jsonSchemaErrors)(definition, options);
    if (errors.length === 0) {
        errors.push.apply(errors, (0, missing_transition_target_errors_1.missingTransitionTargetErrors)(definition, options));
        errors.push.apply(errors, (0, state_transitions_errors_1.stateTransitionsErrors)(definition, options));
        errors.push.apply(errors, (0, duplicate_state_names_errors_1.duplicateStateNames)(definition, options));
        errors.push.apply(errors, (0, missing_terminal_state_errors_1.missingTerminalStateErrors)(definition, options));
        errors.push.apply(errors, (0, duplicate_payload_template_fields_1.mustNotHaveDuplicateFieldNamesAfterEvaluation)(definition, options));
    }
    return {
        isValid: errors.length === 0,
        errors: errors,
        errorsText: function (separator) {
            if (separator === void 0) { separator = '\n'; }
            return errors
                .map(function (error) { return "".concat(error['Error code'], ": ").concat(error.Message); })
                .join(separator);
        },
    };
};
