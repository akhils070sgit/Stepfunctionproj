#!/usr/bin/env node
"use strict";
/* eslint-disable no-console, prefer-destructuring */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var commander_1 = __importDefault(require("commander"));
var validator_1 = __importDefault(require("../src/validator"));
commander_1.default
    .description('Amazon States Language validator')
    .option('--json-definition <jsonDefinition>', 'JSON definition')
    .option('--json-path <jsonPath>', 'JSON path')
    .option('--silent', 'silent mode')
    .option('--no-path-check', 'skips checking path expressions')
    .option('--no-arn-check', 'skips the arn check for Resource values')
    .parse(process.argv);
var definition;
try {
    if (typeof commander_1.default.jsonDefinition === 'string') {
        definition = JSON.parse(commander_1.default.jsonDefinition);
    }
    else if (typeof commander_1.default.jsonPath === 'string') {
        definition = JSON.parse(fs_1.default.readFileSync(commander_1.default.jsonPath).toString());
    }
    else {
        console.log('--json-definition or --json-path is required.');
        commander_1.default.help();
    }
}
catch (e) {
    if (!commander_1.default.silent) {
        console.error('Unable to read or parse state machine definition:', e);
    }
    process.exit(2);
}
try {
    var validationOpts = {
        checkArn: !commander_1.default.noArnCheck,
        checkPaths: !commander_1.default.noPathCheck
    };
    var result = (0, validator_1.default)(definition, validationOpts);
    if (result.isValid) {
        if (!commander_1.default.silent) {
            console.log('✓ State machine definition is valid');
        }
        process.exit(0);
    }
    else {
        if (!commander_1.default.silent) {
            console.error('✕ State machine definition is invalid:\n', result.errorsText());
        }
        process.exit(1);
    }
}
catch (e) {
    if (!commander_1.default.silent) {
        console.error('Validator exception:', e);
    }
    process.exit(2);
}
