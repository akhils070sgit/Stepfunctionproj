service: StepFunctionProject

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:*
      Resource: arn:aws:dynamodb:us-east-2:669166597158:table/bookTable
    - Effect: Allow
      Action: dynamodb:*
      Resource: arn:aws:dynamodb:us-east-2:669166597158:table/usertable
    - Effect: Allow
      Action: sns:*
      Resource: arn:aws:sns:us-east-2:669166597158:custorderSNS
    - Effect: Allow
      Action: sqs:*
      Resource: arn:aws:sqs:us-east-2:669166597158:custorderSQS
    - Effect: Allow
      Action: states:*
      Resource: arn:aws:states:us-east-2:669166597158:stateMachine:StorecheckoutStepFn


functions:
  checkInventory:
    handler: handler.checkInventory
  calculateTotal:
    handler: handler.calculateTotal
  redeempoints:
    handler: handler.redeempoints
  billCustomer:
    handler: handler.billCustomer
  restoreRedeemPoints:
    handler: handler.restoreRedeemPoints
  restoreQuantity:
    handler: handler.restoreQuantity
  sqsWorker:
    handler: handler.sqsWorker
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-2:669166597158:custorderSQS
          batchSize: 1
  

plugins:
  - serverless-step-functions

stepFunctions:
  stateMachines:
    StorecheckoutStepFn:
      name : StorecheckoutStepFn
      definition: 
       StartAt: checkInventory
       States:
        checkInventory:
          Type: Task
          Resource: 
            Fn::GetAtt: [checkInventory, Arn] 
          Catch:
            - ErrorEquals: [bookNotFound]
              Next: bookNotFoundError
            - ErrorEquals: [bookOutofStock]
              Next: bookOutofStockError
          ResultPath: "$.book"
          Next: calculateTotal
        calculateTotal:
          Type: Task
          Resource:
            Fn::GetAtt: [calculateTotal, Arn]
          ResultPath: "$.total"
          Next: isredeemavailable
        isredeemavailable:
          Type: Choice
          Choices:
           - Variable: $.redeem
             BooleanEquals: true
             Next: redeemPoint
          Default: billCustomer
        redeemPoint: 
          Type: Task
          Resource:
           Fn::GetAtt: [redeempoints, Arn]
          ResultPath: "$.total"
          Catch:
            - ErrorEquals: [States.ALL]
              Next: redeemPointError
          Next : billCustomer
        billCustomer:
          Type: Task
          Resource:
           Fn::GetAtt: [billCustomer, Arn]
          ResultPath: "$.billingstatus"
          Retry:
            - ErrorEquals: [States.All]
              MaxAttempts: 6
          Catch:
            - ErrorEquals: [States.All]
              ResultPath: "$.customerbillingissue"
              Next: billingError
          Next: prepareOrder    
        prepareOrder: #Add to the queue, lambda worker, will allocate the quirier by calling a 3rd party api and reduce the amount from the item
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
            Parameters:
              QueueUrl: https://sqs.us-east-2.amazonaws.com/669166597158/custorderSQS
              MessageBody:
                Input.$: "$"
                Token.$: "$$.Task.Token" #From the context
            ResultPath: "$.courierStatus"
            Catch:
              - ErrorEquals: [NoCourierAvailable]
                ResultPath: "$.courierError"
                Next: RefundCustomer
            Next: DispatchOrder
        DispatchOrder:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: arn:aws:sns:us-east-2:669166597158:custorderSNS
              Message.$: "$"
            Next: Dispatched
        Dispatched:
            Type: Pass
            Result: "Your order will be dispatched in 24 hours"
            End: true       
        bookNotFoundError:
          Type: Pass
          Result: "Entered book is not available, please make sure searching correct book!"
          End: true
        bookOutofStockError:
          Type: Pass
          Result: "Currently Book is out of stock"
          End: true
        redeemPointError:
          Type: Pass
          Result: "Error in redeeming points"
          End: true
        billingError:
          Type: Pass
          Result: "Error in billing"
          ResultPath: "$.billingerror"
          Next: restoreRedeemPoints
        restoreRedeemPoints:
          Type: Task
          Resource:
           Fn::GetAtt: [restoreRedeemPoints, Arn]
          End: true
        RestoreQuantity:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreQuantity, Arn]
            ResultPath: "$.quantityRestoreStatus"
            Next: RestoreRedeemPoints
        RefundCustomer:
            Type: Pass
            Result: "Customer is refunded"
            ResultPath: "$.refundStatus"
            Next: RestoreQuantity

          